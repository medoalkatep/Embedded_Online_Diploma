/*
 ============================================================================
 Name        : assignments-8/3
 Author      : Mohamed Ahmed Mohamed Osman
 Version     :
 Copyright   : Your copyright notice
 Description : STM32F103C6 USART DRIVER
 ============================================================================
 */

#ifndef INC_STM32_F103C6_USART_H_
#define INC_STM32_F103C6_USART_H_

//-----------------------------
//Includes
//-----------------------------

#include "stm32f103x6.h"
#include "Stm32_F103C6_Gpio.h"
#include "Stm32_F103C6_RCC.h"



// Configuration structure

typedef struct
{
	uint8_t     USART_MODE ;   				 // Specifies TX/RX Enable Disable
											// This parameter must be set @ ref USAERT_MODE_Define

	uint32_t   USART_BaudRate ;			  // This member specifies the USART communication baudrate
										 // This parameter must be set @ ref USAERT_BaudRate_Define

	uint8_t     USART_Payload ;        // Specifies the number of data bita transmitted in a frame
									  // This parameter must be set @ ref USAERT_Payload_Define

	uint8_t     USART_Parity ;       // Specifies the parity mode
									// This parameter must be set @ ref USAERT_Parity_Define

	uint8_t     USART_StopBits ;             // Specifies the number of stopbits transmitted
											// This parameter must be set @ ref USAERT_StopBits_Define

	uint8_t     USART_HWFlow ;            // Specifies whether the Flow control mode is enabled / disabled
										 // This parameter must be set @ ref USAERT_HWFlow_Define

	uint8_t     USART_IRQ_Enable ;      // Enable or Disable the USART TX/RX
									   // This parameter must be set @ ref USAERT_IRQ_Enable_Define

	void (* P_IRQ_CallBack)(void); 	 // Set the C Function that will be called once the IRQ happens



}USART_Config;


//=================================================
// Macros Configurations References
//=================================================


// @ ref USAERT_MODE_Define

#define USART_Mode_TX					(uint32_t)(1 << 3)
#define USART_Mode_RX					(uint32_t)(1 << 2)
#define USART_Mode_TX_RX				(uint32_t)(1 << 3 | 1 << 2 )



// @ ref USAERT_BaudRate_Define

#define USART_BaudRate_2400					2400
#define USART_BaudRate_9600					9600
#define USART_BaudRate_19200				19200
#define USART_BaudRate_57600				57600
#define USART_BaudRate_115200				115200
#define USART_BaudRate_230400				230400
#define USART_BaudRate_460800				460800
#define USART_BaudRate_921600				921600
#define USART_BaudRate_2250000				2250000
#define USART_BaudRate_4500000				4500000


// @ ref USAERT_Payload_Define

#define USART_Payload_8bit				  (uint32_t)(0)
#define USART_Payload_9bit				  (uint32_t)(1 << 12)


// @ ref USAERT_Parity_Define

#define USART_Parity_None				  (uint32_t)(0)
#define USART_Parity_Even				  (uint32_t)(1 << 10)
#define USART_Parity_Odd				  (uint32_t)(1 << 10 | 1 << 9 )


// @ ref USAERT_StopBits_Define

#define USART_StopBits_half				  	  (uint32_t)(1 << 12)
#define USART_StopBits_1				 	  (uint32_t)(1 << 0 )
#define USART_StopBits_1_half				  (uint32_t)(3 << 12)
#define USART_StopBits_2					  (uint32_t)(2 << 12)


// @ ref USAERT_HWFlow_Define

#define USART_HWFlow_None					  	  (uint32_t)(0)
#define USART_HWFlow_CTS					 	  (uint32_t)(1 << 9 )
#define USART_HWFlow_RTS					 	  (uint32_t)(1 << 8 )
#define USART_HWFlow_CTS_RTS				 	  (uint32_t)(1 << 9 | 1 << 8)


// @ ref USAERT_IRQ_Enable_Define

#define USART_IRQ_Enable_None         				  (uint32_t)(0)
#define USART_IRQ_Enable_TXE         				  (uint32_t)(1 << 7)
#define USART_IRQ_Enable_TC         				  (uint32_t)(1 << 6)
#define USART_IRQ_Enable_RXNEIE         			  (uint32_t)(1 << 5)
#define USART_IRQ_Enable_PE	         			  (uint32_t)(1 << 8)



// Baud Rate Calculations

#define USART_DIV(_PClock_,_BAUD_)							(uint32_t)( _PClock_ / ( 16 * _BAUD_ ) )
#define USART_DIV_MUL100(_PClock_,_BAUD_)					(uint32_t)( ( _PClock_ * 25 ) / (4 * _BAUD_ ) )
#define Mantissa_MUL100(_PClock_,_BAUD_)					(uint32_t)( USART_DIV(_PClock_,_BAUD_) * 100 )
#define Mantissa(_PClock_,_BAUD_)							(uint32_t)( USART_DIV(_PClock_,_BAUD_) )
#define DIV_Fraction(_PClock_,_BAUD_)						(uint32_t)( ( ( USART_DIV_MUL100(_PClock_,_BAUD_) - Mantissa_MUL100(_PClock_,_BAUD_) ) * 16 ) / 100   )
#define USART_BRR_Register(_PClock_,_BAUD_)					(uint32_t)( ( Mantissa(_PClock_,_BAUD_) << 4 ) | ( ( DIV_Fraction(_PClock_,_BAUD_) ) & 0xF  ) )



//=================================================
// Enums Configurations References
//=================================================


enum Polling_Mechanism
{
	Enable ,
	Disable
};



/*
 * ========================================================================================
 * 					    	APIs Supported By "MCAL USART DRIVER"
 * ========================================================================================
 */


void MCAL_USART_INIT(USART_TypDef* USARTx ,USART_Config* USART_Config);

void MCAL_USART_DEINIT(USART_TypDef* USARTx );

void MCAL_GPIO_USART_SET_PINS(USART_TypDef* USARTx);

void MCAL_USART_Send_Date(USART_TypDef* USARTx ,uint16_t * pTXBuffer , enum Polling_Mechanism PolloingEN);

void MCAL_USART_Receive_Date(USART_TypDef* USARTx ,uint16_t * pRXBuffer , enum Polling_Mechanism PolloingEN);

void MCAL_USART_WAIT_TC(USART_TypDef* USARTx );








#endif /* INC_STM32_F103C6_USART_H_ */
