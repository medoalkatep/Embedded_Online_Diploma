/*
 ============================================================================
 Name        : assignments-8/5
 Author      : Mohamed Ahmed Mohamed Osman
 Version     :
 Copyright   : Your copyright notice
 Description : STM32F103C6 SPI DRIVER
 ============================================================================
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "stm32f103x6.h"
#include "Stm32_F103C6_Gpio.h"
#include "Stm32_F103C6_EXTI.h"
#include "Stm32_F103C6_RCC.h"
#include "Stm32_F103C6_USART.h"
#include "Stm32_F103C6_SPI.h"
#include "LCD.h"
#include "KeyPad.h"

//#define MCU_ACT_AS_MASTER
#define MCU_ACT_AS_SLAVE

void clock_init()
{
	// PORT A CLOCK ENABLED
	RCC_GPIOA_CLC_EN() ;
	// PORT B CLOCK ENABLED
	RCC_GPIOB_CLC_EN() ;
	// AFIO CLOCK ENABLED
	RCC_AFIO_CLC_EN() ;
}

unsigned char ch ;

void OSMAN_SPI_IRQ(struct S_IRQ_SRC irq_src)
{
#ifdef MCU_ACT_AS_SLAVE
	if (irq_src.RXNE)
	{
		ch = 0xf ;
		MCAL_SPI_Receive_Send(SPI1,&ch, disable);
		MCAL_USART_Send_Date(USART1, &ch, Enable);
	}

#endif
}

void OSMAN_USART_IRQ(void)
{
#ifdef MCU_ACT_AS_MASTER
	MCAL_USART_Receive_Date(USART1, &ch, Disable);
	MCAL_USART_Send_Date(USART1, &ch, Enable);

	// Send to SPI
	MCAL_GPIO_WRITEPIN(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET) ;
	MCAL_SPI_Receive_Send(SPI1,&ch, enable);
	MCAL_GPIO_WRITEPIN(GPIOA, GPIO_PIN_4, GPIO_PIN_SET) ;
#endif
}


int main(void)
{
	clock_init();

	// USART INIT
	USART_Config USART_CFG ;
	USART_CFG.USART_BaudRate = USART_BaudRate_115200 ;
	USART_CFG.USART_HWFlow = USART_HWFlow_None ;
	USART_CFG.USART_Parity = USART_Parity_None ;
	USART_CFG.USART_IRQ_Enable = USART_IRQ_Enable_RXNEIE ;
	USART_CFG.P_IRQ_CallBack = OSMAN_USART_IRQ ;
	USART_CFG.USART_Payload = USART_Payload_8bit ;
	USART_CFG.USART_StopBits = USART_StopBits_1 ;
	USART_CFG.USART_MODE = USART_Mode_TX_RX ;
	MCAL_USART_INIT(USART1, &USART_CFG);
	MCAL_GPIO_USART_SET_PINS(USART1);

	// SPI INIT
	SPI_Config SPI_CFG ;
	SPI_CFG.CLK_Phase = SPI_CLK_Phase_2Edge ;
	SPI_CFG.CLK_Polarity = SPI_CLK_Polarity_high_when_idle ;
	SPI_CFG.Data_Size = SPI_Data_Size_8Bit ;
	SPI_CFG.Frame_Format = SPI_Frame_Format_MSB ;
	SPI_CFG.Baud_Rate_Pre = SPI_Baud_Rate_8 ;
	SPI_CFG.Communication_Mode = SPI_Direction_2Lines ;

#ifdef MCU_ACT_AS_MASTER
	SPI_CFG.Device_Mode = SPI_Device_MODE_Master ;
	SPI_CFG.IRQ_Enable = SPI_IRQ_Enable_None ;
	SPI_CFG.NSS = SPI_NSS_Soft_Set ;
	SPI_CFG.P_IRQ_CallBack = NULL ;

	// Configure SS on GPIO PA4
	GPIO_PinConfig_t PIN_CFG ;
	PIN_CFG.GPIO_PinNumber = GPIO_PIN_4 ;
	PIN_CFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	PIN_CFG.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(GPIOA, &PIN_CFG) ;

	// Force the SS High
	MCAL_GPIO_WRITEPIN(GPIOA, GPIO_PIN_4, GPIO_PIN_SET) ;
#endif

#ifdef MCU_ACT_AS_SLAVE
	SPI_CFG.Device_Mode = SPI_Device_MODE_Slave ;
	SPI_CFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE ;
	SPI_CFG.NSS = SPI_NSS_Hard_Slave ;
	SPI_CFG.P_IRQ_CallBack = OSMAN_SPI_IRQ ;

#endif
	MCAL_SPI_INIT(SPI1, &SPI_CFG);
	MCAL_GPIO_SPI_SET_PINS(SPI1);





	while (1)
	{


	}
}
