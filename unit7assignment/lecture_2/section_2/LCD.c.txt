/*
============================================================================
Name        : assignments-lesson-7/2.c
Author      : Mohamed Ahmed Mohamed Osman
Version     :
Copyright   : Your copyright notice
Description : LCD DRIVER
============================================================================
*/

#include "LCD.h"

void LCD_GOTO_XY(int line, int position) {
    if (line == 1) {
        if (position < 16 && position >= 0) {
            LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
        }
    } else if (line == 2) {
        if (position < 16 && position >= 0) {
            LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
        }
    }
}

void LCD_clear_screen() {
    LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_KICK() {
    lcd_ctrl |= (1 << ENABLE_SWITCH);
    _delay_ms(30);
    lcd_ctrl &= ~(1 << ENABLE_SWITCH);
}

void lcd_is_busy() {
    datadir_lcd_port = 0x00; // Set port as input
    lcd_ctrl |= (1 << RW_SWITCH); // Set RW to read
    lcd_ctrl &= ~(1 << RS_SWITCH); // Set RS to command
    LCD_KICK();
    datadir_lcd_port = 0xFF; // Set port as output
    lcd_ctrl &= ~(1 << RW_SWITCH); // Clear RW
}

void LCD_INIT() {
    #ifdef EIGHTBIT_MODE
    lcd_is_busy();
    datadir_lcd_ctrl |= (1 << ENABLE_SWITCH) | (1 << RW_SWITCH) | (1 << RS_SWITCH);
    lcd_ctrl &= ~((1 << ENABLE_SWITCH) | (1 << RW_SWITCH) | (1 << RS_SWITCH));
    LCD_clear_screen();
    LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    #endif
    
    LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
    LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_WRITE_COMMAND(unsigned char command) {
    #ifdef EIGHTBIT_MODE
    lcd_is_busy();
    lcd_port = command;
    lcd_ctrl &= ~((1 << RW_SWITCH) | (1 << RS_SWITCH)); // RW = 0, RS = 0
    LCD_KICK();
    #endif
}

void LCD_WRITE_CHARACTER(unsigned char data) {
    #ifdef EIGHTBIT_MODE
    lcd_is_busy();
    lcd_port = data;
    lcd_ctrl &= ~(1 << RW_SWITCH); // RW = 0
    lcd_ctrl |= (1 << RS_SWITCH); // RS = 1
    LCD_KICK();
    #endif
}

void LCD_WRITE_STRING(char* data) {
    int count = 0;
    while (*data > 0) {
        count++;
        LCD_WRITE_CHARACTER(*data++);
        if (count == 16) {
            LCD_GOTO_XY(2, 0);
        } else if (count == 32) {
            LCD_clear_screen();
            LCD_GOTO_XY(1, 0);
            count = 0; // Reset count after clearing screen
        }
    }
}
