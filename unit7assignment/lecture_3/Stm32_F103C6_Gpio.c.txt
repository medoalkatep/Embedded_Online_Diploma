//*
 ============================================================================
 Name        : assignments-7/3
 Author      : Mohamed Ahmed Mohamed Osman
 Version     :
 Copyright   : Your copyright notice
 Description : STM32F103C6 DRIVER
 ============================================================================
 */

//-----------------------------
//Includes
//-----------------------------

#include "stm32f103x6.h"
#include "Stm32_F103C6_Gpio.h"


uint8_t GET_CRLH_POSITION(uint16_t PinNumber)
{
	switch(PinNumber)
	{
	case GPIO_PIN_0 :
		return 0 ;
		break ;
	case GPIO_PIN_1 :
		return 4 ;
		break ;
	case GPIO_PIN_2 :
		return 8 ;
		break ;
	case GPIO_PIN_3 :
		return 12 ;
		break ;
	case GPIO_PIN_4 :
		return 16 ;
		break ;
	case GPIO_PIN_5 :
		return 20 ;
		break ;
	case GPIO_PIN_6 :
		return 24 ;
		break ;
	case GPIO_PIN_7 :
		return 28 ;
		break ;
	case GPIO_PIN_8 :
		return 0 ;
		break ;
	case GPIO_PIN_9 :
		return 4 ;
		break ;
	case GPIO_PIN_10 :
		return 8 ;
		break ;
	case GPIO_PIN_11 :
		return 12 ;
		break ;
	case GPIO_PIN_12 :
		return 16 ;
		break ;
	case GPIO_PIN_13 :
		return 20 ;
		break ;
	case GPIO_PIN_14 :
		return 24 ;
		break ;
	case GPIO_PIN_15 :
		return 28 ;
		break ;
	}
	return 0 ;
}

/**================================================================
 * @Fn               -MCAL_GPIO_INIT
 * @brief            -Initializes the GPIOx PINy according to the specified parameter in the PinConfig
 * @param [in]       -GPIOx: where x can be (A ....E depending on device used) to select the GPIO peripheral
 * @param [in]       -PinConfig pointer to a GPIO_PinConfig_t that contains
 *                    the configuration information for the specified GPIO Pin
 * @retval           -none
 * Note              -STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 					  But LQFP48 Package only has GPIO A , B part of C , D
 */

void MCAL_GPIO_INIT(GPIO_TypDef* GPIOx ,GPIO_PinConfig_t *PinConfig )
{
	// The low  configuration CRL from PIN 0 to ..7
	// The high configuration CRH from PIN 8 to ..15
	volatile uint32_t * config_registor ;
	uint8_t pin_config ;
	config_registor = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
	//Clear CNF and MODE
	(*config_registor) &= ~( 0xf << GET_CRLH_POSITION(PinConfig->GPIO_PinNumber) ) ;
	// IF PIN IS OUTPUT
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP )  )
	{
		pin_config = ( ( ( PinConfig->GPIO_MODE - 4  << 2 ) | (PinConfig->GPIO_OUTPUT_SPEED ) ) & 0x0f ) ;
	}
	// IF PIN IS INPUT
	else
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog ) )
		{
			pin_config = ( ( (PinConfig->GPIO_MODE  << 2 ) | (0x0 ) ) & 0x0f ) ;
		}
		else if ((PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT ))
		{
			pin_config = ( ( (GPIO_MODE_INPUT_FLO  << 2 ) | (0x0 ) ) & 0x0f ) ;
		}
		else
		{
			pin_config = ( ( (GPIO_MODE_INPUT_PU  << 2 ) | (0x0 ) ) & 0x0f ) ;
			if ( PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU )
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
			}
			else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
			}
		}
	}

	(*config_registor) |= ( (pin_config) << GET_CRLH_POSITION(PinConfig->GPIO_PinNumber) );
}



/**================================================================
 * @Fn               -MCAL_GPIO_DEINIT
 * @brief            -Reset all the GPIO Registers
 * @param [in]       -GPIOx: where x can be (A ....E depending on device used) to select the GPIO peripheral
 * @retval           -none
 * Note              -none
 */

void MCAL_GPIO_DEINIT(GPIO_TypDef* GPIOx )
{
	if( GPIOx == GPIOA)
	{
		RCC->APB2RSTR |=  ( 1<<2 ) ;
		RCC->APB2RSTR &= ~( 1<<2 ) ;
	}
	else if( GPIOx == GPIOB)
	{
		RCC->APB2RSTR |=  ( 1<<3 ) ;
		RCC->APB2RSTR &= ~( 1<<3 ) ;
	}
	else if( GPIOx == GPIOC)
	{
		RCC->APB2RSTR |=  ( 1<<4 ) ;
		RCC->APB2RSTR &= ~( 1<<4 ) ;
	}
	else if( GPIOx == GPIOD)
	{
		RCC->APB2RSTR |=  ( 1<<5 ) ;
		RCC->APB2RSTR &= ~( 1<<5 ) ;
	}
	else if( GPIOx == GPIOE)
	{
		RCC->APB2RSTR |=  ( 1<<6 ) ;
		RCC->APB2RSTR &= ~( 1<<6 ) ;
	}
}

/**================================================================
 * @Fn               -MCAL_GPIO_READPIN
 * @brief            -Set specifiec PIN
 * @param [in]       -GPIOx: where x can be (A ....E depending on device used) to select the GPIO peripheral
 * @param [in]       -PinNumber: Set PIN Number according to @ GPIO_PINS_DEFINE
 * @retval           -The input PIN value (two values based on @ GPIO_PINS_STATE)
 * Note              -none
 */

uint8_t MCAL_GPIO_READPIN (GPIO_TypDef* GPIOx , uint16_t PinNumber )
{
	uint8_t pin_status ;
	if ( ( (GPIOx->IDR) &  PinNumber ) != (uint32_t)GPIO_PIN_RESET )
	{
		pin_status = GPIO_PIN_SET ;
	}
	else
	{
		pin_status = GPIO_PIN_RESET ;
	}
	return pin_status ;
}


/**================================================================
 * @Fn               -MCAL_GPIO_READPORT
 * @brief            -Set specifiec PIN
 * @param [in]       -GPIOx: where x can be (A ....E depending on device used) to select the GPIO peripheral
 * @retval           -The input PORT value
 * Note              -none
 */

uint16_t MCAL_GPIO_READPORT (GPIO_TypDef* GPIOx )
{
	uint16_t port_status ;
	port_status = (uint16_t)GPIOx->IDR ;
	return port_status ;
}


/**================================================================
 * @Fn               -MCAL_GPIO_WRITEPIN
 * @brief            -write on specific PIN
 * @param [in]       -GPIOx: where x can be (A ....E depending on device used) to select the GPIO peripheral
 * @param [in]       -PinNumber: Set PIN Number according to @ GPIO_PINS_DEFINE
 * @param [in]       -VALUE: PIN value
 * @retval           -none
 * Note              -none
 */

void MCAL_GPIO_WRITEPIN (GPIO_TypDef* GPIOx ,uint16_t PinNumber ,uint8_t value )
{
	if ( value != GPIO_PIN_RESET )
	{
		GPIOx->BSRR = (uint32_t)PinNumber ;
	}
	else
	{
		GPIOx->BRR =  (uint32_t)PinNumber ;
	}
}


/**================================================================
 * @Fn               -MCAL_GPIO_WRITEPORT
 * @brief            -write on specific PORT
 * @param [in]       -GPIOx: where x can be (A ....E depending on device used) to select the GPIO peripheral
 * @param [in]       -VALUE: PORT value
 * @retval           -none
 * Note              -none
 */

void MCAL_GPIO_WRITEPORT (GPIO_TypDef* GPIOx ,uint16_t value )
{

	GPIOx->ODR = (uint32_t)value ;
}


/**================================================================
 * @Fn               -MCAL_GPIO_TOGGLEPIN
 * @brief            -Toggle on specific PIN
 * @param [in]       -GPIOx: where x can be (A ....E depending on device used) to select the GPIO peripheral
 * @param [in]       -PinNumber: Set PIN Number according to @ GPIO_PINS_DEFINE
 * @retval           -none
 * Note              -none
 */

void MCAL_GPIO_TOGGLEPIN (GPIO_TypDef* GPIOx ,uint16_t PinNumber )
{
	GPIOx->ODR ^= (PinNumber) ;
}


/**================================================================
 * @Fn               -MCAL_GPIO_lockpin
 * @brief            -The Locking mechanism allows the IO configuration to be frozen
 * @param [in]       -GPIOx: where x can be (A ....E depending on device used) to select the GPIO peripheral
 * @param [in]       -PinNumber: Set PIN Number according to @ GPIO_PINS_DEFINE
 * @retval           -OK if PIN is Locked or ERROR if not Locked (defined at @ GPIO_LICK_OUTCOME)
 * Note              -none
 */

uint8_t MCAL_GPIO_lockpin (GPIO_TypDef* GPIOx ,uint16_t PinNumber )
{
	volatile uint32_t temp ;
	// Set the 16 bit
	temp |= 1<<16 ;
	// Set the bit to be locked
	temp |= PinNumber ;
	// Write 1
	GPIOx->LCKR = temp ;
	// Write 0
	GPIOx->LCKR = PinNumber ;
	// Write 1
	GPIOx->LCKR = temp ;
	// Read  0
	temp = GPIOx->LCKR ;
	// Read  1
	if( (uint32_t) (GPIOx->LCKR & 1<< 16))
	{
		return GPIO_LOCK_OK ;
	}
	else
	{
		return GPIO_LOCK_ERROR ;
	}
}















































