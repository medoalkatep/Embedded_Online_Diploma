/*
============================================================================
Name        : assignments-lesson-7/3.c
Author      : Mohamed Ahmed Mohamed Osman
Version     :
Copyright   : Your copyright notice
Description : KeyPad DRIVER
============================================================================
 */


#include "KeyPad.h"

int KEYPAD_R[] = {R0, R1, R2, R3};
int KEYPAD_C[] = {C0, C1, C2, C3};

void KEYPAD_INIT()
{
	// Set rows as inputs
	//   datadir_keypad_port &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3)) ;
	Pin_Confg.GPIO_PinNumber = R0 ;
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	Pin_Confg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(KEYPAD_PORT , & Pin_Confg ) ;
	Pin_Confg.GPIO_PinNumber = R1 ;
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	Pin_Confg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(KEYPAD_PORT , & Pin_Confg ) ;
	Pin_Confg.GPIO_PinNumber = R2 ;
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	Pin_Confg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(KEYPAD_PORT , & Pin_Confg ) ;
	Pin_Confg.GPIO_PinNumber = R3 ;
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	Pin_Confg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(KEYPAD_PORT , & Pin_Confg ) ;
	// Set columns as outputs
	// datadir_keypad_port |=  ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3)) ;
	Pin_Confg.GPIO_PinNumber = C0 ;
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	Pin_Confg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(KEYPAD_PORT , & Pin_Confg ) ;
	Pin_Confg.GPIO_PinNumber = C1 ;
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	Pin_Confg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(KEYPAD_PORT , & Pin_Confg ) ;
	Pin_Confg.GPIO_PinNumber = C2 ;
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	Pin_Confg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(KEYPAD_PORT , & Pin_Confg ) ;
	Pin_Confg.GPIO_PinNumber = C3 ;
	Pin_Confg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
	Pin_Confg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M ;
	MCAL_GPIO_INIT(KEYPAD_PORT , & Pin_Confg ) ;

	//	KEYPAD_PORT |= ((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3))          ;      // Enable pull-up resistors on rows
	//	KEYPAD_PORT &= ~((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3))         ;     // Set columns low initially
	MCAL_GPIO_WRITEPORT(KEYPAD_PORT, 0xFF) ;
}

char KEYPAD_GET_CHAR()
{
	for (int i = 0; i < 4; i++)
	{
		//	KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));     // Set all columns high
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, KEYPAD_C[0], GPIO_PIN_SET) ;
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, KEYPAD_C[1], GPIO_PIN_SET) ;
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, KEYPAD_C[2], GPIO_PIN_SET) ;
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, KEYPAD_C[3], GPIO_PIN_SET) ;
		// Set the current column low
		//	KEYPAD_PORT &= ~(1 << KEYPAD_C[i]);
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, KEYPAD_C[i], GPIO_PIN_RESET) ;

		for (int j = 0; j < 4; j++)
		{
			if ( MCAL_GPIO_READPIN(KEYPAD_PORT , KEYPAD_R[j]) == 0 )
			{
				// Check if a key is pressed in the current row
				while ( MCAL_GPIO_READPIN(KEYPAD_PORT , KEYPAD_R[j]) == 0 );     // Wait for the key to be released

				switch (i) {
				case 0:
					if (j == 0) return '7';
					else if (j == 1) return '4';
					else if (j == 2) return '1';
					else if (j == 3) return '!';
					break;
				case 1:
					if (j == 0) return '8';
					else if (j == 1) return '5';
					else if (j == 2) return '2';
					else if (j == 3) return '0';
					break;
				case 2:
					if (j == 0) return '9';
					else if (j == 1) return '6';
					else if (j == 2) return '3';
					else if (j == 3) return '=';
					break;
				case 3:
					if (j == 0) return '/';
					else if (j == 1) return '*';
					else if (j == 2) return '-';
					else if (j == 3) return '+';
					break;
				}
			}
		}
	}
	return 'N'; // Return 'N' if no key is pressed
}
