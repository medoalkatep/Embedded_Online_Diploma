/*
 ============================================================================
 Name        : assignments-7/4
 Author      : Mohamed Ahmed Mohamed Osman
 Version     :
 Copyright   : Your copyright notice
 Description : STM32F103C6 EXTI DRIVER
 ============================================================================
 */

//-----------------------------
//Includes
//-----------------------------

#include "stm32f103x6.h"
#include "Stm32_F103C6_EXTI.h"
#include "Stm32_F103C6_Gpio.h"


/*===================================================================
 *             Global Variables
 * ==================================================================
 */

void        (* GP_IRQ_CallBack[15])(void)   ;


/*===================================================================
 *             Generic Macros
 * ==================================================================
 */

#define AFIO_GPIO_EXTI_Mapping(x)                ( (x == GPIOA)? 0 : \
												   (x == GPIOB)? 1 : \
												   (x == GPIOC)? 2 : \
											       (x == GPIOD)? 3 : 0 )

/*===================================================================
 *             Generic Functions
 * ==================================================================
 */

void Enale_NVIC(uint16_t IRQ)
{
	switch( IRQ )
	{
	case 0 :
		NVIC_IRQ6_EXTI0_Enable ;
		break ;
	case 1 :
		NVIC_IRQ7_EXTI1_Enable ;
		break ;
	case 2 :
		NVIC_IRQ8_EXTI2_Enable ;
		break ;
	case 3 :
		NVIC_IRQ9_EXTI3_Enable ;
		break ;
	case 4 :
		NVIC_IRQ10_EXTI4_Enable ;
		break ;
	case 5 :
	case 6 :
	case 7 :
	case 8 :
	case 9 :
		NVIC_IRQ23_EXTI5_9_Enable ;
		break ;
	case 10 :
	case 11 :
	case 12 :
	case 13 :
	case 14 :
	case 15 :
		NVIC_IRQ40_EXTI10_15_Enable ;
		break ;

	}
}

void Disale_NVIC(uint16_t IRQ)
{
	switch( IRQ )
		{
	case 0 :
		NVIC_IRQ6_EXTI0_Disable ;
		break ;
	case 1 :
		NVIC_IRQ7_EXTI1_Disable ;
		break ;
	case 2 :
		NVIC_IRQ8_EXTI2_Disable ;
		break ;
	case 3 :
		NVIC_IRQ9_EXTI3_Disable ;
		break ;
	case 4 :
		NVIC_IRQ10_EXTI4_Disable ;
		break ;
	case 5 :
	case 6 :
	case 7 :
	case 8 :
	case 9 :
		NVIC_IRQ23_EXTI5_9_Disable ;
		break ;
	case 10 :
	case 11 :
	case 12 :
	case 13 :
	case 14 :
	case 15 :
		NVIC_IRQ40_EXTI10_15_Disable ;
		break ;
	}
}


void Update_EXTI( EXTI_Pinconfig_t* EXTI_Config )
{
	// 1- Configure AF GPIO to AF Input -> floating input
	GPIO_PinConfig_t PinCfg ;
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_Pin.EXTI_PinNumber ;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
	MCAL_GPIO_INIT(EXTI_Config->EXTI_Pin.GPIO_Port, & PinCfg) ;

//=======================================================
	// 2- Update AFIO to Route between EXTI Line with port A , B , C , D
	uint8_t AFIO_EXTI_Index      =   EXTI_Config->EXTI_Pin.EXTI_InputLineNumber / 4       ;
	uint8_t AFIO_EXTI_Position   =  (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber % 4 ) * 4 ;
	// Clear the 4 Bits
	AFIO->EXTICR[ AFIO_EXTI_Index ] &= ~( 0xf << AFIO_EXTI_Position ) ;
	AFIO->EXTICR[ AFIO_EXTI_Index ] |=   ( ( AFIO_GPIO_EXTI_Mapping( EXTI_Config->EXTI_Pin.GPIO_Port ) & 0xF) << AFIO_EXTI_Position ) ;

//=======================================================
	// 3- Update Rising or Falling or Both Register
	EXTI->RTSR &= ~( 1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber)    ;
	EXTI->FTSR &= ~( 1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber)    ;

	if ( EXTI_Config->Trigger_Case == EXTI_Trigger_Rising )
	{
		EXTI->RTSR |= ( 1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
	}
	else if ( EXTI_Config->Trigger_Case == EXTI_Trigger_Falling )
	{
		EXTI->FTSR |= ( 1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
	}
	else if ( EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling )
	{
		EXTI->RTSR |= ( 1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
		EXTI->FTSR |= ( 1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
	}

//=======================================================
	// 4- Update IRQ Handling CallBack

	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.EXTI_InputLineNumber] = EXTI_Config->p_IRQ_CallBack ;


//=======================================================
	// 5- Enable/Disable IRQ EXTI and NVIC
	if (EXTI_Config->IRQ_ENABLE == EXTI_IRQ_ENABLE )
	{
		EXTI->IMR |=  ( 1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber ) ;
		Enale_NVIC( EXTI_Config->EXTI_Pin.EXTI_InputLineNumber )  ;
	}
	else
	{
		EXTI->IMR &= ~( 1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber ) ;
		Disale_NVIC( EXTI_Config->EXTI_Pin.EXTI_InputLineNumber ) ;
	}

}




/*==============================================================================================
 * ==================              ISR Functions              ==================
 * ==============================================================================================
 * */

void EXTI0_IRQHandler(void)
{
	// Clear the PR Register
	EXTI->PR |= (1 << 0) ;

	// Call IRQ
	GP_IRQ_CallBack[0]() ;

}

void EXTI1_IRQHandler(void)
{
	EXTI->PR |= (1 << 1) ;
	GP_IRQ_CallBack[1]() ;
}

void EXTI2_IRQHandler(void)
{
	EXTI->PR |= (1 << 2) ;
	GP_IRQ_CallBack[2]() ;
}

void EXTI3_IRQHandler(void)
{
	EXTI->PR |= (1 << 3) ;
	GP_IRQ_CallBack[3]() ;
}

void EXTI4_IRQHandler(void)
{
	EXTI->PR |= (1 << 4) ;
	GP_IRQ_CallBack[4]() ;
}

void EXTI9_5_IRQHandler(void)
{
	if( EXTI->PR & 1 << 5 ) { EXTI->PR |= (1 << 5 ) ; GP_IRQ_CallBack[5]() ; }
	if( EXTI->PR & 1 << 6 ) { EXTI->PR |= (1 << 6 ) ; GP_IRQ_CallBack[6]() ; }
	if( EXTI->PR & 1 << 7 ) { EXTI->PR |= (1 << 7 ) ; GP_IRQ_CallBack[7]() ; }
	if( EXTI->PR & 1 << 8 ) { EXTI->PR |= (1 << 8 ) ; GP_IRQ_CallBack[8]() ; }
	if( EXTI->PR & 1 << 9 ) { EXTI->PR |= (1 << 9 ) ; GP_IRQ_CallBack[9]() ; }

}

void EXTI15_10_IRQHandler(void)
{
	if( EXTI->PR & 1 << 10 ) { EXTI->PR |= (1 << 10 ) ; GP_IRQ_CallBack[10]() ; }
	if( EXTI->PR & 1 << 11 ) { EXTI->PR |= (1 << 11 ) ; GP_IRQ_CallBack[11]() ; }
	if( EXTI->PR & 1 << 12 ) { EXTI->PR |= (1 << 12 ) ; GP_IRQ_CallBack[12]() ; }
	if( EXTI->PR & 1 << 13 ) { EXTI->PR |= (1 << 13 ) ; GP_IRQ_CallBack[13]() ; }
	if( EXTI->PR & 1 << 14 ) { EXTI->PR |= (1 << 14 ) ; GP_IRQ_CallBack[14]() ; }
	if( EXTI->PR & 1 << 15 ) { EXTI->PR |= (1 << 15 ) ; GP_IRQ_CallBack[15]() ; }

}



/**================================================================
 * @Fn               -MCAL_EXTI_GPIO_INIT
 * @brief            -Initializes EXTI from specific GPIO Pin and specify the mask/trigger condition and IRQ CallBack
 * @param [in]       -EXTI_Config Set based on @ EXTI_DEFINE , @ EXTI_Trigger_DEFINE and @ EXTI_IRQ_DEFINE
 * @retval           -none
 * Note              -STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 					  But LQFP48 Package only has GPIO A , B part of C , D
 */

void MCAL_EXTI_GPIO_INIT(EXTI_Pinconfig_t* EXTI_Config)
{
	Update_EXTI(EXTI_Config);
}

/**================================================================
 * @Fn               -MCAL_EXTI_GPIO_UPDATE
 * @brief            -Updates EXTI from specific GPIO Pin and specify the mask/trigger condition and IRQ CallBack
 * @param [in]       -EXTI_Config Set based on @ EXTI_DEFINE , @ EXTI_Trigger_DEFINE and @ EXTI_IRQ_DEFINE
 * @retval           -none
 * Note              -STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 					  But LQFP48 Package only has GPIO A , B part of C , D
 */

void MCAL_EXTI_GPIO_UPDATE(EXTI_Pinconfig_t* EXTI_Config)
{
	Update_EXTI(EXTI_Config);
}


/**================================================================
 * @Fn               -MCAL_EXTI_GPIO_DEINIT
 * @brief            -Reset EXTI Register and NVIC Corresponding to IRQ Mask
 * @retval           -none
 * Note              -none
 */
void MCAL_EXTI_GPIO_DEINIT(void)
{
	EXTI->IMR   = 0x00000000 ;
	EXTI->EMR   = 0x00000000 ;
	EXTI->RTSR  = 0x00000000 ;
	EXTI->FTSR  = 0x00000000 ;
	EXTI->SWIER = 0x00000000 ;

// This Register is Cleared By Writing 1 (rc_w1)
	EXTI->PR    = 0XFFFFFFFF ;

// Disable EXTI IRQ From NVIC

     NVIC_IRQ6_EXTI0_Disable             ;
     NVIC_IRQ7_EXTI1_Disable        	 ;
     NVIC_IRQ8_EXTI2_Disable      	     ;
     NVIC_IRQ9_EXTI3_Disable         	 ;
     NVIC_IRQ10_EXTI4_Disable      	     ;
     NVIC_IRQ23_EXTI5_9_Disable   	     ;
     NVIC_IRQ40_EXTI10_15_Disable        ;


}

